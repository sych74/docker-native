type: install
id: docker-swarm-ce
baseUrl: https://raw.githubusercontent.com/sych74/docker-native/master/docker-swarm
description:
  text: /text/description.md
  short: Docker Swarm Cluster with out-of-box auto-clustering and auto-scaling
categories:
  - apps/clusters
  - apps/dev-and-admin-tools
logo: ../images/docker-swarm-logo-89x70.png
name: Docker Swarm Cluster
targetRegions:
  type: vz7

globals:
  connect-node: ${baseUrl}/scripts/connect-swarm-node.js?_r=${fn.random}
  update-tokens: ${baseUrl}/scripts/update-swarm-tokens.js?_r=${fn.random}
  get-tokens: /scripts/get-swarm-tokens.js?_r=${fn.random}
  startPage: http://${env.domain}/
 
onBeforeInit: |
  var url = "https://registry.hub.docker.com/v1/repositories/jelastic/docker-ce/tags";
  var tags = toNative(new com.hivext.api.core.utils.Transport().get(url)).sort();
  var ver = {},
      numDef = "", def = "";
  for (var i = 0; i < tags.length; i++) {
      var name = tags[i].name,
      numName = name.replace(/\./g, "");      
      ver[tags[i].name] = name;
      if (!isNaN(numName) && numName > numDef) {
        numDef = numName;
        def = name;
      }
  }
  
  var resp = {result:0};
  var url = "https://raw.githubusercontent.com/sych74/docker-native/master/docker-swarm/configs/settings.yaml?_r=${fn.random}";
  resp.settings = toNative(new org.yaml.snakeyaml.Yaml().load(new com.hivext.api.core.utils.Transport().get(url)));  
  resp.settings.fields.unshift({
    name: "version",
    caption: "Docker Version",
    type: "list",
    values: ver,
    width: 100,
    "default": def
  });
  return resp;

nodes:
  - count: ${settings.mngr}
    cloudlets: 32
    nodeType: dockerengine
    tag: ${settings.version}
    nodeGroup: cp
    displayName: Manager
    env:
      JELASTIC_EXPOSE: false
    
  - count: ${settings.worker}
    nodeGroup: worker
    nodeType: dockerengine
    tag: ${settings.version}
    displayName: Worker
    cloudlets: 32
    env:
      JELASTIC_EXPOSE: false

skipNodeEmails: true
 
onInstall:
  - addExtIp
  - init-swarm
  - build-cluster
  - if (${settings.autoscaling:false}): scaling-triggers
  - if ('${settings.stack}' == 'deploy'): deploy
  - portainer
  - get-tokens
  
onBeforeClone: stopEvent
#onAfterClone:
#  - install: 
#      jps: /addons/docker-swarm-restore.jps?_r=${fn.random}
#      envName: ${event.response.env.envName}      
#  - build-cluster: ${event.response.env.envName}

actions:
  init-swarm:
    install: /addons/docker-swarm-init.jps?_r=${fn.random}
    
  build-cluster:    
    install:
      jps: /addons/docker-swarm-scaling.jps?_r=${fn.random}
      envName: ${this:}
      settings:
        update-tokens: ${globals.update-tokens}
        connect-node: ${globals.connect-node}
        
  scaling-triggers:
    install:
      jps: ../addons/autoscaling-triggers.jps?_r=${fn.random}
      settings:
        mngr: ${settings.mngr}
        worker: ${settings.worker}
        
  deploy:
    - install:
        jps: ../addons/docker-deploy.jps?_r=${fn.random}
        settings:
          yml: ${settings.yml}
          stackName: ${settings.stackName}
          type: stackName
          preHook: ${settings.preHook}
 
    - if ('${settings.yml}'.indexOf('/openfaas/') > -1):
        setGlobals:
          startPage: http://${env.domain}:8080/

    - if ('${settings.yml}'.indexOf('/example-voting-app/') > -1):
        setGlobals:
          startPage: http://${env.domain}:5000/
        
  get-tokens:
    script: ${globals.get-tokens}
    next: succes-message
    
  succes-message:
    - setGlobals:
        manager_token: ${this.manager}
        worker_token: ${this.worker}
    - send-success
      
  send-success: 
    script: |
        return {type:'success', message:'/text/success.md', email:'/text/success.md'}

  portainer:
    if ('${settings.portainer}' == 'true'):
      - install:
          jps: ../addons/portainer.jps?_r=${fn.random}
          settings:
            mode: swarm
      - setGlobals:
          startPage: https://${env.domain}:4848/

  addExtIp:
    script: ../addons/scripts/attach-external-ip.js?_r=${fn.random}

startPage: ${globals.startPage}
