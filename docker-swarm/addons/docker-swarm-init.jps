type: update
id: docker-swarm-init
name: Docker Swarm Init
baseUrl: https://raw.githubusercontent.com/sych74/docker-native/master/docker-swarm/addons
onInstall:
  #blocking requests to the old swarm
  - if (${settings.clone:false}):
      - cmd[${nodes.cp.master.id}]: grep -oP 'addr":"\K.*?(?=:2377)' < /var/lib/docker/swarm/state.json | paste -s -d,
      - setGlobals:
          oldIntIPs: ${response.out}          
      - cmd[${nodes.cp.master.id}]: grep -oP 'node_id":"\K.*?(?=")' < /var/lib/docker/swarm/state.json | paste -s -d,
      - setGlobals:
          oldNIDs: ${response.out}
      - nat: A
  - env.control.ExecDockerRunCmd[*]
  - log: Swarm Init
  - init-swarm
    #remove old cluster nodes 
  - if (${settings.clone:false}):
      - get-ids: nodes.cp
      - removeNode: 
          id: ${globals.ids}
          manager: true  
      - cmd[${nodes.cp.master.id}]: |- 
          IFS=',' read -ra ids <<< ${globals.oldNIDs}
          for id in "${ids[@]}"; do
            docker node rm --force $id &>> /var/log/run.log || echo "NODE RM ERR: $id"   
          done
      - cmd[${globals.ids}]: |- 
          yes | rm -rf /var/lib/docker/swarm      
  - cmd[${nodes.cp.master.id}]: |-
      docker node ls
  - build-cluster
  - cmd[${nodes.cp.master.id}]: |-
      docker node ls
  #rejoining master manager for udating --advertise-addr  
  - if (false && ${settings.clone:false} && nodes.cp.length > 1):
    - sleep: 10000
    - cmd[${nodes.cp.master.id}]: |-
        docker node ls
        docker node demote $(hostname) &>> /var/log/run.log
        docker swarm leave --force &>> /var/log/run.log
        docker swarm join --token ${globals.manager-token} ${nodes.cp.last.intIP}:2377 >> /var/log/run.log || echo "RE-JOIN ERR: check /var/log/run.log"
    #- cmd[${nodes.cp.last.id}]: |-
    #    docker node rm --force node${nodes.cp.master.id}-${env.domain} &>> /var/log/run.log || echo "REMOVE ERR: check /var/log/run.log"
    - nat: D

onAfterClone:
  re-init-swarm: ${event.response.env.envName}

onAfterMigrate:
  re-init-swarm: ${event.response.env.envName}

onAfterScaleOut[worker]:
  - get-ids: event.response.nodes
  - get-worker-token
  - connectNode: 
      id: ${globals.ids}
      token: ${globals.worker-token}

onAfterScaleOut[cp]:
  - get-ids: event.response.nodes
  - get-manager-token
  - connectNode: 
      id: ${globals.ids}
      token: ${globals.manager-token}

onBeforeScaleIn[cp]:
  - get-ids: event.response.nodes
  - removeNode:
      id: ${globals.ids}
      manager: true

onBeforeScaleIn[worker]:
  - get-ids: event.response.nodes
  - removeNode:
      id: ${globals.ids}

actions:
  init-swarm:
    cmd[${nodes.cp.master.id}]: |-
      log=/var/log/run.log
      echo -e "\n\n-------------\n$(date) -> Init Swarm: --force-new-cluster --advertise-addr ${nodes.cp.master.intIP}" >> $log
      init="docker swarm init --force-new-cluster --advertise-addr ${nodes.cp.master.intIP}"
      $init &>> $log || { service docker restart && sleep 10 && $init >> $log; }
      
  get-ids:
    - setGlobals: 
        ids: ''
        sep: ''
    - forEach(${this}):
        if (${@i.id} != ${nodes.cp.master.id}):
          add-id: ${@i.id}
          
  add-id:
    setGlobals: 
      ids: ${globals.ids:}${globals.sep:}${this}
      sep: ','
      
  build-cluster:    
    - log: Connecting Manager Nodes
    - get-ids: nodes.cp
    - get-manager-token
    - connectNode: 
        id: ${globals.ids}
        token: ${globals.manager-token}
        
    - log: Connecting Worker Nodes
    - get-worker-token
    - connectNode: 
        id: worker
        token: ${globals.worker-token}
    #remove old cluster nodes 
    - if (false && ${settings.clone:false}):
        - sleep: 10000
        - cmd[${nodes.cp.master.id}]: |-
            docker node ls
            nodes=$(docker node ls | awk '/Down|Unknown/' | awk '{print $1}')
            for n in $nodes; do docker node rm $n; done    

  get-manager-token: 
    - cmd[${nodes.cp.master.id}]: docker swarm join-token -q manager
    - setGlobals:
        manager-token: ${response.out}
        
  get-worker-token: 
    - cmd[${nodes.cp.master.id}]: docker swarm join-token -q worker
    - setGlobals:
        worker-token: ${response.out}
  
  connectNode:
    cmd[${this.id}]: |-
      log=/var/log/run.log
      echo -e "\n\n-------------\n$(date) -> Connect $(hostname)"
      leave="docker swarm leave --force"
      join="docker swarm join --token ${this.token} ${nodes.cp.master.intIP}:2377"
      $join &>> $log || { sleep 10 && ! docker info 2> /dev/null | grep 'Error' || { service docker restart && sleep 10 && { $join &>> $log || echo "JOIN ERR: check $log"; } } }
    #$join >> $log || { service docker restart && sleep 10 && { $leave &>> $log && $join &>> $log || echo "JOIN ERR: check $log"; } }

  removeNode:
    - cmd[${this.id}]: |-
        log=/var/log/run.log
        nid=$(docker info 2> /dev/null | grep NodeID | awk '{print $2}')
        [ ${this.manager:false} = true ] && docker node demote $(hostname) &>> $log
        docker swarm leave --force &>> $log
        echo $nid
    - cmd[${nodes.cp.master.id}]: |-
        IFS=',' read -ra node <<< ${this.id}
        for id in "${node[@]}"; do
          docker node rm --force node$id-${env.domain} &>> /var/log/run.log || echo "NODE RM ERR: node$id-${env.domain}"   
        done

  removeNodeOld:
    - cmd[${nodes.cp.master.id}]: |-
        IFS=',' read -ra node <<< ${this.id}
        for id in "${node[@]}"; do
          docker node demote node$id-${env.domain} &>> /var/log/run.log
        done
    - cmd[${this.id}]: docker swarm leave --force &>> /var/log/run.log
    - if (${this.id} != ${nodes.cp.master.id}):
        cmd[${nodes.cp.master.id}]: |-
          IFS=',' read -ra node <<< ${this.id}
          for id in "${node[@]}"; do
            docker node rm --force node$id-${env.domain} &>> /var/log/run.log    
          done
  nat:
    cmd[cp,worker]: |-
      IFS=',' read -ra ips <<< ${globals.oldIntIPs:}
      for ip in "${ips[@]}"; do
        iptables -t nat -${this} OUTPUT -p tcp -d $ip -j DNAT --to-destination ${nodes.cp.master.intIP}  
      done
  
  re-init-swarm:
    - install: 
      jps: /docker-swarm-init.jps
      envName: ${this}      
      settings: 
        clone: true
